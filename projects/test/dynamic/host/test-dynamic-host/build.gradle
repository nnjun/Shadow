apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.TEST_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.test.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/test-dynamic-manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        animationsDisabled = true
    }
    flavorDimensions "targetSdk"
    productFlavors {
        target28 {
            //target28就是defaultConfig
        }
        target34 {
            minSdkVersion 19
            targetSdkVersion 34
        }
    }
}

dependencies {
    implementation "commons-io:commons-io:$commons_io_android_version"//example复制apk用的.
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':constant')

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-remote:$espresso_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    implementation project(':plugin-use-host-code-lib')
    implementation project(':test-manager')
    implementation project(':custom-view')

    androidTestTarget28Implementation "androidx.test:core:$androidx_test_version"
    androidTestTarget34Implementation "androidx.test:core:1.6.1"

    androidTestTarget28Implementation "androidx.test:runner:$androidx_test_version"
    androidTestTarget34Implementation "androidx.test:runner:1.6.1"
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName, forTask) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}For${forTask.capitalize()}", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'test-dynamic-manager'
    def pluginManagerApkFile = file(
            "${project(":test-dynamic-manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':test-dynamic-manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}",
            generateAssetsTask.name
    )

    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
    generateAssetsTask.dependsOn createCopyTask(
            ':test-plugin-general-cases',
            buildType,
            'plugin-zip',
            "plugin-${buildType}.zip",
            pluginZip,
            "package${buildType.capitalize()}Plugin",
            generateAssetsTask.name
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateTarget28DebugAssets" || task.name == "generateTarget34DebugAssets") {
        generateAssets(task, 'debug')
    }
}